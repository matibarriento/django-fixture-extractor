# Generated by Django 4.2 on 2024-06-21 19:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tests.testproject.eventol.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ActivityType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Kind of activity", max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name="Attendee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="First Name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Last Name"
                    ),
                ),
                (
                    "nickname",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Nickname"
                    ),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                (
                    "is_installing",
                    models.BooleanField(
                        default=False, verbose_name="Is going to install?"
                    ),
                ),
                (
                    "additional_info",
                    models.CharField(
                        blank=True,
                        help_text="Additional info you consider                                                    relevant to the organizers",
                        max_length=200,
                        null=True,
                        verbose_name="Additional Info",
                    ),
                ),
                (
                    "email_confirmed",
                    models.BooleanField(default=False, verbose_name="Email confirmed?"),
                ),
                (
                    "email_token",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Confirmation Token",
                    ),
                ),
                (
                    "registration_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Registration Date"
                    ),
                ),
            ],
            options={
                "verbose_name": "Attendee",
                "verbose_name_plural": "Attendees",
            },
        ),
        migrations.CreateModel(
            name="ContactType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, unique=True, verbose_name="Name"),
                ),
                (
                    "icon_class",
                    models.CharField(max_length=200, verbose_name="Icon Class"),
                ),
                (
                    "validate",
                    models.CharField(
                        choices=[
                            ("1", "Validate URL"),
                            ("2", "Validate Email"),
                            ("3", "Don't validate"),
                        ],
                        help_text="Type of field validation",
                        max_length=10,
                        verbose_name="Level",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contact Type",
                "verbose_name_plural": "Contact Types",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                ("name", models.CharField(max_length=50, verbose_name="Event Name")),
                (
                    "abstract",
                    models.TextField(
                        help_text="Idea of the event                                             (one or two sentences)",
                        max_length=250,
                        verbose_name="Abstract",
                    ),
                ),
                (
                    "limit_proposal_date",
                    models.DateField(
                        help_text="Limit date to submit talk proposals",
                        verbose_name="Limit Proposals Date",
                    ),
                ),
                (
                    "registration_closed",
                    models.BooleanField(
                        default=False,
                        help_text="set it to True to force the registration to be closed",
                    ),
                ),
                (
                    "event_slug",
                    models.SlugField(
                        help_text="For example: flisol-caba",
                        max_length=100,
                        unique=True,
                        verbose_name="URL",
                    ),
                ),
                (
                    "cname",
                    models.CharField(
                        blank=True,
                        help_text="For example: flisol-caba",
                        max_length=50,
                        null=True,
                        validators=[tests.testproject.eventol.models.validate_url],
                        verbose_name="CNAME",
                    ),
                ),
                (
                    "registration_code",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Code validator for in-place event self-registration",
                        unique=True,
                        verbose_name="code",
                    ),
                ),
                (
                    "external_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="http://www.my-awesome-event.com",
                        null=True,
                        verbose_name="External URL",
                    ),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                (
                    "schedule_confirmed",
                    models.BooleanField(
                        default=False, verbose_name="Schedule Confirmed"
                    ),
                ),
                (
                    "use_installations",
                    models.BooleanField(default=True, verbose_name="Use Installations"),
                ),
                (
                    "use_installers",
                    models.BooleanField(default=True, verbose_name="Use Installers"),
                ),
                (
                    "use_collaborators",
                    models.BooleanField(default=True, verbose_name="Use Collaborators"),
                ),
                (
                    "use_proposals",
                    models.BooleanField(default=True, verbose_name="Use Proposals"),
                ),
                (
                    "use_talks",
                    models.BooleanField(default=True, verbose_name="Use Talks"),
                ),
                (
                    "is_flisol",
                    models.BooleanField(default=False, verbose_name="Is FLISoL"),
                ),
                (
                    "use_schedule",
                    models.BooleanField(default=True, verbose_name="Use Schedule"),
                ),
                (
                    "place",
                    models.TextField(blank=True, null=True, verbose_name="Place"),
                ),
                (
                    "template",
                    models.FileField(
                        blank=True,
                        help_text="Custom template HTML for event index page",
                        null=True,
                        upload_to="templates",
                        verbose_name="Template",
                    ),
                ),
                (
                    "css_custom",
                    models.FileField(
                        blank=True,
                        help_text="Custom CSS file for event page",
                        null=True,
                        upload_to="custom_css",
                        verbose_name="Custom CSS",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event",
                "verbose_name_plural": "Events",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="EventolSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "background",
                    models.ImageField(
                        blank=True,
                        help_text="A image to show in the background of",
                        null=True,
                        upload_to="",
                    ),
                ),
                (
                    "logo_header",
                    models.ImageField(
                        blank=True,
                        help_text="This logo will be shown in the right corner of the page",
                        null=True,
                        upload_to="",
                    ),
                ),
                (
                    "logo_landing",
                    models.ImageField(
                        blank=True,
                        help_text="Logo to show in the center of the page",
                        null=True,
                        upload_to="",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        help_text="A message to show in the center of the page",
                        max_length=280,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "eventol setting",
                "verbose_name_plural": "eventol settings",
            },
        ),
        migrations.CreateModel(
            name="EventTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="This name will be used as a slug",
                        max_length=50,
                        unique=True,
                        verbose_name="EventTag Name",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "background",
                    models.ImageField(
                        blank=True,
                        help_text="A image to show in the background of",
                        null=True,
                        upload_to="",
                    ),
                ),
                (
                    "logo_header",
                    models.ImageField(
                        blank=True,
                        help_text="This logo will be shown in the right corner of the page",
                        null=True,
                        upload_to="",
                    ),
                ),
                (
                    "logo_landing",
                    models.ImageField(
                        blank=True,
                        help_text="Logo to show in the center of the page",
                        null=True,
                        upload_to="",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        help_text="A message to show in the center of the page",
                        max_length=280,
                        null=True,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="For example: flisol-caba",
                        max_length=100,
                        unique=True,
                        verbose_name="URL",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.event",
                        verbose_name="Event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event User",
                "verbose_name_plural": "Event Users",
            },
        ),
        migrations.CreateModel(
            name="Hardware",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("MOB", "Mobile"),
                            ("NOTE", "Notebook"),
                            ("NET", "Netbook"),
                            ("TAB", "Tablet"),
                            ("DES", "Desktop"),
                            ("OTH", "Other"),
                        ],
                        max_length=200,
                        verbose_name="Type",
                    ),
                ),
                (
                    "manufacturer",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Manufacturer",
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Model"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Software",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("OS", "Operative System"),
                            ("AP", "Application"),
                            ("SU", "Support and Problem Fixing"),
                            ("OT", "Other"),
                        ],
                        max_length=200,
                        verbose_name="Type",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                ("sent", models.BooleanField(default=False, verbose_name="Sent")),
                (
                    "code",
                    models.CharField(
                        default=tests.testproject.eventol.models.generate_ticket_code,
                        editable=False,
                        help_text="Unique identifier for the ticket",
                        max_length=21,
                        unique=True,
                        verbose_name="number",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="i.e. Classroom 256",
                        max_length=200,
                        verbose_name="Name",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.event",
                        verbose_name="Event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Room",
                "verbose_name_plural": "Rooms",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Reviewer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "event_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.eventuser",
                        verbose_name="Event User",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Organizer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "event_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.eventuser",
                        verbose_name="Event User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organizer",
                "verbose_name_plural": "Organizers",
            },
        ),
        migrations.CreateModel(
            name="Installer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("1", "Beginner"),
                            ("2", "Medium"),
                            ("3", "Advanced"),
                            ("4", "Super Hacker"),
                        ],
                        help_text="Knowledge level for an installation",
                        max_length=200,
                        verbose_name="Level",
                    ),
                ),
                (
                    "event_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.eventuser",
                        verbose_name="Event User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Installer",
                "verbose_name_plural": "Installers",
            },
        ),
        migrations.CreateModel(
            name="InstallationMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(max_length=254, verbose_name="Contact Email"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.event",
                        verbose_name="Event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post-install Email",
                "verbose_name_plural": "Post-install Emails",
            },
        ),
        migrations.CreateModel(
            name="Installation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Info or trouble you                                          consider relevant to document",
                        null=True,
                        verbose_name="Notes",
                    ),
                ),
                (
                    "attendee",
                    models.ForeignKey(
                        help_text="The owner of the installed hardware",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.attendee",
                        verbose_name="Attendee",
                    ),
                ),
                (
                    "hardware",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.hardware",
                        verbose_name="Hardware",
                    ),
                ),
                (
                    "installer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="installed_by",
                        to="eventol.eventuser",
                        verbose_name="Installer",
                    ),
                ),
                (
                    "software",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.software",
                        verbose_name="Software",
                    ),
                ),
            ],
            options={
                "verbose_name": "Installation",
                "verbose_name_plural": "Installations",
            },
        ),
        migrations.CreateModel(
            name="EventUserAttendanceDate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date of the attendance",
                        verbose_name="Date",
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1", "Qr autoregistration"),
                            ("2", "Qr ticket"),
                            ("3", "Previous registration"),
                            ("4", "unregistred"),
                        ],
                        help_text="Attendance mode",
                        max_length=200,
                        null=True,
                        verbose_name="Mode",
                    ),
                ),
                (
                    "event_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.eventuser",
                        verbose_name="Event User",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="eventuser",
            name="ticket",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="eventol.ticket",
                verbose_name="Ticket",
            ),
        ),
        migrations.AddField(
            model_name="eventuser",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name="User",
            ),
        ),
        migrations.CreateModel(
            name="EventDate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="When will your event be?", verbose_name="Date"
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.event",
                        verbose_name="Event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Date",
                "verbose_name_plural": "Event Dates",
            },
        ),
        migrations.AddField(
            model_name="event",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                help_text="Select tags to show this event in the EventTag landing",
                to="eventol.eventtag",
            ),
        ),
        migrations.CreateModel(
            name="ContactMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                ("message", models.TextField(verbose_name="Message")),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.event",
                        verbose_name="Event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contact Message",
                "verbose_name_plural": "Contact Messages",
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        help_text="i.e. https://twitter.com/flisol",
                        max_length=200,
                        verbose_name="Direccion",
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        help_text="i.e. @Flisol", max_length=200, verbose_name="Text"
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="eventol.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.contacttype",
                        verbose_name="Contact Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contact",
                "verbose_name_plural": "Contacts",
            },
        ),
        migrations.CreateModel(
            name="Collaborator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "assignation",
                    models.CharField(
                        blank=True,
                        help_text="Anything you can help with                                                (i.e. Talks, Coffee…)",
                        max_length=200,
                        null=True,
                        verbose_name="Assignation",
                    ),
                ),
                (
                    "time_availability",
                    models.CharField(
                        blank=True,
                        help_text='Time period in which you can                                                      help during the event. i.e.                                                      "All the event", "Morning",                                                      "Afternoon", …',
                        max_length=200,
                        null=True,
                        verbose_name="Time Availability",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Phone"
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Address"
                    ),
                ),
                (
                    "additional_info",
                    models.CharField(
                        blank=True,
                        help_text="Additional info you consider relevant",
                        max_length=200,
                        null=True,
                        verbose_name="Additional Info",
                    ),
                ),
                (
                    "event_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.eventuser",
                        verbose_name="Event User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Collaborator",
                "verbose_name_plural": "Collaborators",
            },
        ),
        migrations.CreateModel(
            name="AttendeeAttendanceDate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date of the attendance",
                        verbose_name="Date",
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1", "Qr autoregistration"),
                            ("2", "Qr ticket"),
                            ("3", "Previous registration"),
                            ("4", "unregistred"),
                        ],
                        help_text="Attendance mode",
                        max_length=200,
                        null=True,
                        verbose_name="Mode",
                    ),
                ),
                (
                    "attendee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.attendee",
                        verbose_name="Attendee",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="attendee",
            name="event",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="eventol.event",
                verbose_name="Event",
            ),
        ),
        migrations.AddField(
            model_name="attendee",
            name="event_user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="eventol.eventuser",
                verbose_name="Event User",
            ),
        ),
        migrations.AddField(
            model_name="attendee",
            name="ticket",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="eventol.ticket",
                verbose_name="Ticket",
            ),
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                ("title", models.CharField(max_length=100, verbose_name="Title")),
                ("long_description", models.TextField(verbose_name="Long Description")),
                (
                    "abstract",
                    models.TextField(
                        help_text="Short idea of the talk (Two or three sentences)",
                        verbose_name="Abstract",
                    ),
                ),
                (
                    "justification",
                    models.TextField(
                        blank=True,
                        help_text="Why do you reject this proposal?",
                        null=True,
                        verbose_name="Justification",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Start Time"
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="End Time"
                    ),
                ),
                (
                    "speakers_names",
                    models.CharField(
                        help_text="Comma separated speaker names",
                        max_length=600,
                        verbose_name="Speakers Names",
                    ),
                ),
                (
                    "speaker_bio",
                    models.TextField(
                        help_text='Tell us about you (we will use it as your "bio" in our website)',
                        null=True,
                        verbose_name="Speaker Bio",
                    ),
                ),
                (
                    "labels",
                    models.CharField(
                        help_text="Comma separated tags. i.e. Linux,                                           Free Software, Devuan",
                        max_length=200,
                        verbose_name="Labels",
                    ),
                ),
                (
                    "presentation",
                    models.FileField(
                        blank=True,
                        help_text="Material you are going to use                                                 for the talk (optional, but recommended)",
                        null=True,
                        upload_to="talks",
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[("1", "Beginner"), ("2", "Medium"), ("3", "Advanced")],
                        help_text="Talk's Technical level",
                        max_length=100,
                        verbose_name="Level",
                    ),
                ),
                (
                    "additional_info",
                    models.TextField(
                        blank=True,
                        help_text="Info you consider relevant                                                    to the organizer, special                                                    activity requirements, etc.",
                        null=True,
                        verbose_name="Additional Info",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("1", "Proposal"),
                            ("2", "Accepted"),
                            ("3", "Rejected"),
                        ],
                        help_text="Activity proposal status",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "is_dummy",
                    models.BooleanField(
                        default=False,
                        help_text="A dummy activity is used for example for coffee                                                breaks. We use this to exclude it from the index                                                page and other places",
                        verbose_name="Is a dummy Activity?",
                    ),
                ),
                (
                    "activity_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.activitytype",
                        verbose_name="Activity Type",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Speaker or the person in charge of the activity",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.eventuser",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventol.room",
                        verbose_name="Room",
                    ),
                ),
            ],
            options={
                "verbose_name": "Activity",
                "verbose_name_plural": "Activities",
                "ordering": ["title"],
            },
        ),
        migrations.AlterUniqueTogether(
            name="eventuser",
            unique_together={("event", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="attendee",
            unique_together={("event", "email")},
        ),
    ]
